# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
# SPDX-FileCopyrightText: 2025 Nate Graham <nate@kde.org>

# This file controls options to apply when configuring/building projects, and controls which projects are built in the first place.
# List of all options: https://kde-builder.kde.org/en/configuration/conf-options-table.html

config-version: 2
global:
  branch-group: kf6-qt6

  # Finds and includes *KDE*-based dependencies into the build. This makes
  # it easier to ensure that you have all the projects needed, but the
  # dependencies are not very fine-grained so this can result in quite a few
  # projects being installed that you didn't need.
  include-dependencies: true

  source-dir: ~/kde/src  # Directory for downloaded source code
  build-dir: ~/kde/build  # Directory to build KDE into before installing

  # Different for KDE Linux: tell kde-builder to use /usr/ as the configure
  # location. In this CI this works with no modification, but on a user's system,
  # we'll also later actually install everything into ~/kde/ which is the source
  # for the system extension, so all the files end up at /usr/ anyway.
  # This somewhat roundabout process is done because we want the
  # configure paths to be /usr/ to prevent issues from paths differing
  # between system and source-built stuff.
  install-dir: /usr/  # Directory to install KDE software into

  # qt-install-dir: ~/kde/qt  # Directory to install Qt if kde-builder supplies it
  log-dir: ~/kde/log  # Directory to write logs into

  # Different for KDE Linux:
  # -DCMAKE_BUILD_TYPE=RelWithDebInfo: The default
  # -DKDE_INSTALL_USE_QT_SYS_PATHS=ON: Use system Qt paths to prevent issues
  # -DBUILD_HTML_DOCS=OFF & -DBUILD_MAN_DOCS=OFF: We don't ship them in KDE Linux
  # -DBUILD_TESTING=OFF: They take too long and you can re-enable them locally if you want them
  # -DBUILD_PYTHON_BINDINGS=OFF & -DWITH_PYTHON_VENDORING=OFF Don't build Python bindings because we don't yet include their dependencies out of the box
  # -DCMAKE_INSTALL_LIBEXECDIR=lib Merge libexec and lib for simplicity
  # -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_LINKER_LAUNCHER=ccache -DCMAKE_CXX_LINKER_LAUNCHER=ccache: Use ccache for everything to further avoid unnecessary work
  cmake-options: >
    -DCMAKE_BUILD_TYPE=RelWithDebInfo -DKDE_INSTALL_USE_QT_SYS_PATHS=ON -DBUILD_HTML_DOCS=OFF -DBUILD_MAN_DOCS=OFF -DBUILD_TESTING=OFF -DBUILD_PYTHON_BINDINGS=OFF -DWITH_PYTHON_VENDORING=OFF -Wno-dev -DCMAKE_INSTALL_LIBEXECDIR=lib -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_LINKER_LAUNCHER=ccache -DCMAKE_CXX_LINKER_LAUNCHER=ccache

  # kde-builder sets 2 options which is used in options like make-options or set-env
  # to help manage the number of compile jobs that happen during a build:
  #
  # 1. num-cores, which is just the number of detected CPU cores, and can be passed
  #    to tools like make (needed for parallel build) or ninja (completely optional).
  #
  # 2. num-cores-low-mem, which is set to the largest value that appears safe for
  #    particularly heavyweight projects based on total memory, intended for
  #    projects like qtwebengine.
  num-cores: "auto"
  num-cores-low-mem: "auto"

  # Makes the built-from-source Plasma session accessible from the SDDM login screen.

  # Different for KDE Linux: Don't install login session files since we're
  # already building everything to the final location
  install-login-session: false

  # Stop the build process on the first failure. If set to false, when kde-builder
  # encounters a build failure, it will attempt to continue building other projects,
  # using libraries from the system in cases where they would otherwise be provided
  # by a project that has failed to build.
  # Unless your system has very up-to-date packages, this is probably not what you want.
  stop-on-failure: true

  # Use a flat folder layout under ~/kde/src and ~/kde/build
  # rather than nested directories
  directory-layout: flat

  # Use Ninja as cmake generator
  cmake-generator: Ninja

  # Build with LSP support for everything that supports it
  compile-commands-linking: true
  compile-commands-export: true

  # Generate .idea config files in project directories
  # Enable this if you want to use CLion for development
  generate-clion-project-config: false

  # Generate .vscode config files in project directories
  # Enable this if you want to use Visual Studio Code for development
  generate-vscode-project-config: false

  # Generate copy-pastable files for manual qtcreator config creation
  # Enable this if you want to use Qt Creator for development
  generate-qtcreator-project-config: false

  # Show a message when kde-builder detects it is outdated.
  check-self-updates: true

  # Different for KDE Linux: don't need this stuff
  ignore-projects:
  - cxx-rust-cssparser # Dependency of Union; not ready for use yet
  - kgamma # X11-only and we only ship Wayland
  - kwin-x11 # KDE Linux plans on using new technologies when possible
  - packagekit-qt # To avoid pacman packages showing up in discover
  - oxygen # KDE Linux is about the future; this old theme is the past
  - oxygen-icons # KDE Linux is about the future; this old theme is the past
  - oxygen-sounds # KDE Linux is about the future; this old theme is the past
  - plasma-nano # Not sure why this is needed to begin with
  - selenium-webdriver-at-spi # Testing only
  - plymouth-kcm # Not needed as we have an offcial Plymouth theme
  - qqc2-breeze-style # Mobile-only; not needed for desktop UX
  - union # Still under construction; not ready for use yet
  - wacomtablet # X11-only and we only ship Wayland

# With base options set, the remainder of the file is used to define projects to build, in the
# desired order, and set any project-specific options.

# This line includes build configs that are provided in build-configs dir in repo-metadata.
# https://invent.kde.org/sysadmin/repo-metadata/-/tree/master/build-configs
# KDE Builder automatically updates repo-metadata, so you are always using an up-to-date configs.
include ${build-configs-dir}/kde6.yaml: ""

# ===============================================================================================
# Starting from here, you can add your custom projects and override options for defined projects.
# ===============================================================================================

#  To change options for projects that have already been defined, use an "override" node.
#  Example:
#
#    override qt6-set:
#      branch: dev
#
#  To define a project with some options, use "project" node.
#  Example:
#
#    project some-app:
#      repository: https://github.com/YourUser/YourProject.git

# Different for KDE Linux: build the Systemd Sysupdate backend
override discover:
    cmake-options: -DBUILD_SystemdSysupdateBackend=ON

# Different for KDE Linux: force the X11-specific touchpad KCM off because we
# don't care about X11
override plasma-desktop:
    cmake-options: -DBUILD_KCM_TOUCHPAD_X11=OFF
